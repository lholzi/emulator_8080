with Ada.Strings.Bounded;
with Emulator_8080.Processor;

package Emulator_8080.Disassembler is
   type Execution_Mode_Type is (Execute_And_Print, Execute_Only);
   procedure Read_Rom(Execution_Mode : in Execution_Mode_Type; Processor : in out Emulator_8080.Processor.Processor_Type);

private
   procedure Print_Mnemonic_Information(Processor : in Emulator_8080.Processor.Processor_Type);

   package Opcode_String is new Ada.Strings.Bounded.Generic_Bounded_Length(Max => 100);
   type Opcode_Information_Type is record
      Mnemonic : Opcode_String.Bounded_String;
      Description : Opcode_String.Bounded_String;
      Size     : Positive range 1 .. 3;
   end record;
   type Opcode_Mapper_Type is array(Byte_Type'Range) of Opcode_Information_Type;
   --Opcode_Mapper : constant Opcode_Mapper_Type := (others => Opcode_Information_Type'(Mnemonic    => Opcode_String.To_Bounded_String("TEST"),
   --                                                                                   Description => Opcode_String.To_Bounded_String("TEST"),
   --                                                                                   Size        => 1));
   Opcode_Mapper : constant Opcode_Mapper_Type :=
     (16#00# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("NOP"), Size => 1, Description => Opcode_String.To_Bounded_String("NOP")),
      16#01# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("LXI B,D16"), Size => 3, Description => Opcode_String.To_Bounded_String("B <- byte 3, C <- byte 2")),
      16#02# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("STAX B"), Size => 1, Description => Opcode_String.To_Bounded_String("(BC) <- A")),

      16#03# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("INX B"), Size => 1, Description => Opcode_String.To_Bounded_String("BC <- BC+1")),
      16#04# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("INR B"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, AC): B <- B+1")),
      16#05# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("DCR B"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, AC): B <- B-1")),
      16#06# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MVI B, D8"), Size => 2, Description => Opcode_String.To_Bounded_String("B <- byte 2")),
      16#07# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("RLC"), Size => 1, Description => Opcode_String.To_Bounded_String("(CY):A = A << 1; bit 0 = prev bit 7; CY = prev bit 7")),
      16#09# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("DAD B"), Size => 1, Description => Opcode_String.To_Bounded_String("(CY): HL = HL + BC")),
      16#0a# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("LDAX B"), Size => 1, Description => Opcode_String.To_Bounded_String("A <- (BC)")),
      16#0b# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("DCX B"), Size => 1, Description => Opcode_String.To_Bounded_String("BC = BC-1")),
      16#0c# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("INR C"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, AC): C <- C+1")),
      16#0d# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("DCR C"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, AC): C <-C-1")),
      16#0e# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MVI C,D8"), Size => 2, Description => Opcode_String.To_Bounded_String("C <- byte 2")),
      16#0f# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("RRC"), Size => 1, Description => Opcode_String.To_Bounded_String("(CY): A = A >> 1; bit 7 = prev bit 0; CY = prev bit 0")),
      16#11# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("LXI D,D16"), Size => 3, Description => Opcode_String.To_Bounded_String("- byte 3, E <- byte 2")),
      16#12# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("STAX D"), Size => 1, Description => Opcode_String.To_Bounded_String("(DE) <- A")),
      16#13# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("INX D"), Size => 1, Description => Opcode_String.To_Bounded_String("DE <- DE + 1")),
      16#14# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("INR D"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, AC):D <- D+1")),
      16#15# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("DCR D"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, AC):D <- D-1")),
      16#16# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MVI D, D8"), Size => 2, Description => Opcode_String.To_Bounded_String("D <- byte 2")),
      16#17# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("RAL"), Size => 1, Description => Opcode_String.To_Bounded_String("(CY): A = A << 1; bit 0 = prev CY; CY = prev bit 7")),
      16#19# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("DAD D"), Size => 1, Description => Opcode_String.To_Bounded_String("(CY): HL = HL + DE")),
      16#1a# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("LDAX D"), Size => 1, Description => Opcode_String.To_Bounded_String("A <- (DE)")),
      16#1b# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("DCX D"), Size => 1, Description => Opcode_String.To_Bounded_String("DE = DE-1")),
      16#1c# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("INR E"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, AC):E <-E+1")),
      16#1d# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("DCR E"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, AC):E <- E-1")),
      16#1e# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MVI E,D8"), Size => 2, Description => Opcode_String.To_Bounded_String("E <- byte 2")),
      16#1f# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("RAR"), Size => 1, Description => Opcode_String.To_Bounded_String("(CY): A = A >> 1; bit 7 = prev bit 7; CY = prev bit 0")),
      16#21# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("LXI H,D16"), Size => 3, Description => Opcode_String.To_Bounded_String("H <- byte 3, L <- byte 2")),
      16#22# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("SHLD adr"), Size => 3, Description => Opcode_String.To_Bounded_String("(adr) <-L; (adr+1)<-H")),
      16#23# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("INX H"), Size => 1, Description => Opcode_String.To_Bounded_String("HL <- HL + 1")),
      16#24# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("INR H"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, AC):H <- H+1")),
      16#25# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("DCR H"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, AC):H <- H-1")),
      16#26# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MVI H,D8"), Size => 2, Description => Opcode_String.To_Bounded_String("H <- byte 2")),
      16#27# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("DAA"), Size => 1, Description => Opcode_String.To_Bounded_String("special")),
      16#29# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("DAD H"), Size => 1, Description => Opcode_String.To_Bounded_String("(CY): HL = HL + HI")),
      16#2a# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("LHLD adr"), Size => 3, Description => Opcode_String.To_Bounded_String("L <- (adr); H<-(adr+1)")),
      16#2b# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("DCX H"), Size => 1, Description => Opcode_String.To_Bounded_String("HL = HL-1")),
      16#2c# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("INR L "), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, AC):L <- L+1")),
      16#2d# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("DCR L"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, AC):L <- L-1")),
      16#2e# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MVI L, D8"), Size => 2, Description => Opcode_String.To_Bounded_String("L <- byte 2")),
      16#2f# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("CMA"), Size => 1, Description => Opcode_String.To_Bounded_String("A <- !A")),
      16#31# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("LXI SP, D16"), Size => 3, Description => Opcode_String.To_Bounded_String("SP.hi <- byte 3, SP.lo <- byte 2")),
      16#32# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("STA adr"), Size => 3, Description => Opcode_String.To_Bounded_String("(adr) <- A")),
      16#33# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("INX SP"), Size => 1, Description => Opcode_String.To_Bounded_String("SP = SP + 1")),
      16#34# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("INR M"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, AC):(HL) <- (HL)+1")),
      16#35# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("DCR M"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, AC):(HL) <- (HL)-1")),
      16#36# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MVI M,D8"), Size => 2, Description => Opcode_String.To_Bounded_String("(HL) <- byte 2")),
      16#37# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("STC"), Size => 1, Description => Opcode_String.To_Bounded_String("(CY): CY = 1")),
      16#39# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("DAD SP"), Size => 1, Description => Opcode_String.To_Bounded_String("(CY): HL = HL + SP")),
      16#3a# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("LDA adr"), Size => 3, Description => Opcode_String.To_Bounded_String("A <- (adr)")),
      16#3b# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("DCX SP"), Size => 1, Description => Opcode_String.To_Bounded_String("SP = SP-1")),
      16#3c# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("INR A"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, AC):A <- A+1")),
      16#3d# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("DCR A"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, AC):A <- A-1")),
      16#3e# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MVI A,D8"), Size => 2, Description => Opcode_String.To_Bounded_String("A <- byte 2")),
      16#3f# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("CMC"), Size => 1, Description => Opcode_String.To_Bounded_String("(CY): CY=!CY")),
      16#40# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV B,B"), Size => 1, Description => Opcode_String.To_Bounded_String("B <- B")),
      16#41# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV B,C"), Size => 1, Description => Opcode_String.To_Bounded_String("B <- C")),
      16#42# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV B,D"), Size => 1, Description => Opcode_String.To_Bounded_String("B <- D")),
      16#43# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV B,E"), Size => 1, Description => Opcode_String.To_Bounded_String("B <- E")),
      16#44# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV B,H"), Size => 1, Description => Opcode_String.To_Bounded_String("B <- H")),
      16#45# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV B,L"), Size => 1, Description => Opcode_String.To_Bounded_String("B <- L")),
      16#46# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV B,M"), Size => 1, Description => Opcode_String.To_Bounded_String("B <- (HL)")),
      16#47# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV B,A"), Size => 1, Description => Opcode_String.To_Bounded_String("B <- A")),
      16#48# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV C,B"), Size => 1, Description => Opcode_String.To_Bounded_String("C <- B")),
      16#49# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV C,C"), Size => 1, Description => Opcode_String.To_Bounded_String("C <- C")),
      16#4a# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV C,D"), Size => 1, Description => Opcode_String.To_Bounded_String("C <- D")),
      16#4b# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV C,E"), Size => 1, Description => Opcode_String.To_Bounded_String("C <- E")),
      16#4c# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV C,H"), Size => 1, Description => Opcode_String.To_Bounded_String("C <- H")),
      16#4d# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV C,L"), Size => 1, Description => Opcode_String.To_Bounded_String("C <- L")),
      16#4e# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV C,M"), Size => 1, Description => Opcode_String.To_Bounded_String("C <- (HL)")),
      16#4f# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV C,A"), Size => 1, Description => Opcode_String.To_Bounded_String("C <- A")),
      16#50# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV D,B"), Size => 1, Description => Opcode_String.To_Bounded_String("D <- B")),
      16#51# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV D,C"), Size => 1, Description => Opcode_String.To_Bounded_String("D <- C")),
      16#52# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV D,D"), Size => 1, Description => Opcode_String.To_Bounded_String("D <- D")),
      16#53# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV D,E"), Size => 1, Description => Opcode_String.To_Bounded_String("D <- E")),
      16#54# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV D,H"), Size => 1, Description => Opcode_String.To_Bounded_String("D <- H")),
      16#55# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV D,L"), Size => 1, Description => Opcode_String.To_Bounded_String("D <- L")),
      16#56# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV D,M"), Size => 1, Description => Opcode_String.To_Bounded_String("D <- (HL)")),
      16#57# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV D,A"), Size => 1, Description => Opcode_String.To_Bounded_String("D <- A")),
      16#58# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV E,B"), Size => 1, Description => Opcode_String.To_Bounded_String("E <- B")),
      16#59# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV E,C"), Size => 1, Description => Opcode_String.To_Bounded_String("E <- C")),
      16#5a# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV E,D"), Size => 1, Description => Opcode_String.To_Bounded_String("E <- D")),
      16#5b# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV E,E"), Size => 1, Description => Opcode_String.To_Bounded_String("E <- E")),
      16#5c# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV E,H"), Size => 1, Description => Opcode_String.To_Bounded_String("E <- H")),
      16#5d# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV E,L"), Size => 1, Description => Opcode_String.To_Bounded_String("E <- L")),
      16#5e# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV E,M"), Size => 1, Description => Opcode_String.To_Bounded_String("E <- (HL)")),
      16#5f# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV E,A"), Size => 1, Description => Opcode_String.To_Bounded_String("E <- A")),
      16#60# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV H,B"), Size => 1, Description => Opcode_String.To_Bounded_String("H <- B")),
      16#61# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV H,C"), Size => 1, Description => Opcode_String.To_Bounded_String("H <- C")),
      16#62# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV H,D"), Size => 1, Description => Opcode_String.To_Bounded_String("H <- D")),
      16#63# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV H,E"), Size => 1, Description => Opcode_String.To_Bounded_String("H <- E")),
      16#64# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV H,H"), Size => 1, Description => Opcode_String.To_Bounded_String("H <- H")),
      16#65# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV H,L"), Size => 1, Description => Opcode_String.To_Bounded_String("H <- L")),
      16#66# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV H,M"), Size => 1, Description => Opcode_String.To_Bounded_String("H <- (HL)")),
      16#67# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV H,A"), Size => 1, Description => Opcode_String.To_Bounded_String("H <- A")),
      16#68# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV L,B"), Size => 1, Description => Opcode_String.To_Bounded_String("L <- B")),
      16#69# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV L,C"), Size => 1, Description => Opcode_String.To_Bounded_String("L <- C")),
      16#6a# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV L,D"), Size => 1, Description => Opcode_String.To_Bounded_String("L <- D")),
      16#6b# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV L,E"), Size => 1, Description => Opcode_String.To_Bounded_String("L <- E")),
      16#6c# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV L,H"), Size => 1, Description => Opcode_String.To_Bounded_String("L <- H")),
      16#6d# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV L,L"), Size => 1, Description => Opcode_String.To_Bounded_String("L <- L")),
      16#6e# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV L,M"), Size => 1, Description => Opcode_String.To_Bounded_String("L <- (HL)")),
      16#6f# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV L,A"), Size => 1, Description => Opcode_String.To_Bounded_String("L <- A")),
      16#70# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV M,B"), Size => 1, Description => Opcode_String.To_Bounded_String("(HL) <- B")),
      16#71# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV M,C"), Size => 1, Description => Opcode_String.To_Bounded_String("(HL) <- C")),
      16#72# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV M,D"), Size => 1, Description => Opcode_String.To_Bounded_String("(HL) <- D")),
      16#73# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV M,E"), Size => 1, Description => Opcode_String.To_Bounded_String("(HL) <- E")),
      16#74# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV M,H"), Size => 1, Description => Opcode_String.To_Bounded_String("(HL) <- H")),
      16#75# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV M,L"), Size => 1, Description => Opcode_String.To_Bounded_String("(HL) <- L")),
      16#76# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("HLT"), Size => 1, Description => Opcode_String.To_Bounded_String("special")),
      16#77# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV M,A"), Size => 1, Description => Opcode_String.To_Bounded_String("(HL) <- A")),
      16#78# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV A,B"), Size => 1, Description => Opcode_String.To_Bounded_String("A <- B")),
      16#79# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV A,C"), Size => 1, Description => Opcode_String.To_Bounded_String("A <- C")),
      16#7a# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV A,D"), Size => 1, Description => Opcode_String.To_Bounded_String("A <- D")),
      16#7b# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV A,E"), Size => 1, Description => Opcode_String.To_Bounded_String("A <- E")),
      16#7c# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV A,H"), Size => 1, Description => Opcode_String.To_Bounded_String("A <- H")),
      16#7d# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV A,L"), Size => 1, Description => Opcode_String.To_Bounded_String("A <- L")),
      16#7e# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV A,M"), Size => 1, Description => Opcode_String.To_Bounded_String("A <- (HL)")),
      16#7f# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("MOV A,A"), Size => 1, Description => Opcode_String.To_Bounded_String("A <- A")),
      16#80# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("ADD B"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A + B")),
      16#81# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("ADD C"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A + C")),
      16#82# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("ADD D"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A + D")),
      16#83# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("ADD E"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A + E")),
      16#84# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("ADD H"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A + H")),
      16#85# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("ADD L"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A + L")),
      16#86# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("ADD M"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A + (HL)")),
      16#87# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("ADD A"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A + A")),
      16#88# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("ADC B"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A + B + CY")),
      16#89# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("ADC C"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A + C + CY")),
      16#8a# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("ADC D"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A + D + CY")),
      16#8b# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("ADC E"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A + E + CY")),
      16#8c# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("ADC H"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A + H + CY")),
      16#8d# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("ADC L"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A + L + CY")),
      16#8e# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("ADC M"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A + (HL) + CY")),
      16#8f# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("ADC A"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A + A + CY")),
      16#90# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("SUB B"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A - B")),
      16#91# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("SUB C"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A - C")),
      16#92# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("SUB D"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A + D")),
      16#93# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("SUB E"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A - E")),
      16#94# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("SUB H"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A + H")),
      16#95# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("SUB L"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A - L")),
      16#96# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("SUB M"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A + (HL)")),
      16#97# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("SUB A"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A - A")),
      16#98# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("SBB B"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A - B - CY")),
      16#99# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("SBB C"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A - C - CY")),
      16#9a# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("SBB D"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A - D - CY")),
      16#9b# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("SBB E"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A - E - CY")),
      16#9c# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("SBB H"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A - H - CY")),
      16#9d# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("SBB L"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A - L - CY")),
      16#9e# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("SBB M"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A - (HL) - CY")),
      16#9f# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("SBB A"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A - A - CY")),
      16#a0# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("ANA B"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A & B")),
      16#a1# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("ANA C"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A & C")),
      16#a2# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("ANA D"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A & D")),
      16#a3# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("ANA E"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A & E")),
      16#a4# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("ANA H"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A & H")),
      16#a5# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("ANA L"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A & L")),
      16#a6# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("ANA M"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A & (HL)")),
      16#a7# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("ANA A"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A & A")),
      16#a8# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("XRA B"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A ^ B")),
      16#a9# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("XRA C"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A ^ C")),
      16#aa# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("XRA D"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A ^ D")),
      16#ab# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("XRA E"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A ^ E")),
      16#ac# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("XRA H"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A ^ H")),
      16#ad# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("XRA L"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A ^ L")),
      16#ae# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("XRA M"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A ^ (HL)")),
      16#af# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("XRA A"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A ^ A")),
      16#b0# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("ORA B"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A | B")),
      16#b1# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("ORA C"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A | C")),
      16#b2# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("ORA D"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A | D")),
      16#b3# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("ORA E"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A | E")),
      16#b4# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("ORA H"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A | H")),
      16#b5# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("ORA L"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A | L")),
      16#b6# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("ORA M"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A | (HL)")),
      16#b7# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("ORA A"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A | A")),
      16#b8# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("CMP B"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A - B")),
      16#b9# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("CMP C"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A - C")),
      16#ba# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("CMP D"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A - D")),
      16#bb# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("CMP E"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A - E")),
      16#bc# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("CMP H"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A - H")),
      16#bd# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("CMP L"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A - L")),
      16#be# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("CMP M"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A - (HL)")),
      16#bf# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("CMP A"), Size => 1, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A - A")),
      16#c0# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("RNZ"), Size => 1, Description => Opcode_String.To_Bounded_String("if NZ, RET")),
      16#c1# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("POP B"), Size => 1, Description => Opcode_String.To_Bounded_String("C <- (sp); B <- (sp+1); sp <- sp+2")),
      16#c2# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("JNZ adr"), Size => 3, Description => Opcode_String.To_Bounded_String("if NZ, PC <- adr")),
      16#c3# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("JMP adr"), Size => 3, Description => Opcode_String.To_Bounded_String("PC <= adr")),
      16#c4# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("CNZ adr"), Size => 3, Description => Opcode_String.To_Bounded_String("if NZ, CALL adr")),
      16#c5# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("PUSH B"), Size => 1, Description => Opcode_String.To_Bounded_String("(sp-2)<-C; (sp-1)<-B; sp <- sp - 2")),
      16#c6# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("ADI D8"), Size => 2, Description => Opcode_String.To_Bounded_String("Z, S, P, CY, ACA <- A + byte")),
      16#c7# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("RST 0"), Size => 1, Description => Opcode_String.To_Bounded_String("CALL $0")),
      16#c8# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("RZ"), Size => 1, Description => Opcode_String.To_Bounded_String("if Z, RET")),
      16#c9# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("RET"), Size => 1, Description => Opcode_String.To_Bounded_String("PC.lo <- (sp); PC.hi<-(sp+1); SP <- SP+2")),
      16#ca# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("JZ adr"), Size => 3, Description => Opcode_String.To_Bounded_String("if Z, PC <- adr")),
      16#cc# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("CZ adr"), Size => 3, Description => Opcode_String.To_Bounded_String("if Z, CALL adr")),
      16#cd# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("CALL adr"), Size => 3, Description => Opcode_String.To_Bounded_String("(SP-1)<-PC.hi;(SP-2)<-PC.lo;SP<-SP-2;PC=adr")),
      16#ce# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("ACI D8"), Size => 2, Description => Opcode_String.To_Bounded_String("Z, S, P, CY, ACA <- A + data + CY")),
      16#cf# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("RST 1"), Size => 1, Description => Opcode_String.To_Bounded_String("CALL $8")),
      16#d0# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("RNC"), Size => 1, Description => Opcode_String.To_Bounded_String("if NCY, RET")),
      16#d1# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("POP D"), Size => 1, Description => Opcode_String.To_Bounded_String("E <- (sp); D <- (sp+1); sp <- sp+2")),
      16#d2# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("JNC adr"), Size => 3, Description => Opcode_String.To_Bounded_String("if NCY, PC<-adr")),
      16#d3# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("OUT D8"), Size => 2, Description => Opcode_String.To_Bounded_String("special")),
      16#d4# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("CNC adr"), Size => 3, Description => Opcode_String.To_Bounded_String("if NCY, CALL adr")),
      16#d5# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("PUSH D"), Size => 1, Description => Opcode_String.To_Bounded_String("(sp-2)<-E; (sp-1)<-D; sp <- sp - 2")),
      16#d6# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("SUI D8"), Size => 2, Description => Opcode_String.To_Bounded_String("Z, S, P, CY, ACA <- A - data")),
      16#d7# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("RST 2"), Size => 1, Description => Opcode_String.To_Bounded_String("CALL $10")),
      16#d8# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("RC"), Size => 1, Description => Opcode_String.To_Bounded_String("if CY, RET")),
      16#da# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("JC adr"), Size => 3, Description => Opcode_String.To_Bounded_String("if CY, PC<-adr")),
      16#db# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("IN D8"), Size => 2, Description => Opcode_String.To_Bounded_String("special")),
      16#dc# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("CC adr"), Size => 3, Description => Opcode_String.To_Bounded_String("if CY, CALL adr")),
      16#de# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("SBI D8"), Size => 2, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A - data - CY")),
      16#df# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("RST 3"), Size => 1, Description => Opcode_String.To_Bounded_String("CALL $18")),
      16#e0# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("RPO"), Size => 1, Description => Opcode_String.To_Bounded_String("if PO, RET")),
      16#e1# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("POP H"), Size => 1, Description => Opcode_String.To_Bounded_String("L <- (sp); H <- (sp+1); sp <- sp+2")),
      16#e2# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("JPO adr"), Size => 3, Description => Opcode_String.To_Bounded_String("if PO, PC <- adr")),
      16#e3# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("XTHL"), Size => 1, Description => Opcode_String.To_Bounded_String("L <-> (SP); H <-> (SP+1)")),
      16#e4# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("CPO adr"), Size => 3, Description => Opcode_String.To_Bounded_String("if PO, CALL adr")),
      16#e5# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("PUSH H"), Size => 1, Description => Opcode_String.To_Bounded_String("(sp-2)<-L; (sp-1)<-H; sp <- sp - 2")),
      16#e6# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("ANI D8"), Size => 2, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A & data")),
      16#e7# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("RST 4"), Size => 1, Description => Opcode_String.To_Bounded_String("CALL $20")),
      16#e8# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("RPE"), Size => 1, Description => Opcode_String.To_Bounded_String("if PE, RET")),
      16#e9# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("PCHL"), Size => 1, Description => Opcode_String.To_Bounded_String("PC.hi <- H; PC.lo <- L")),
      16#ea# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("JPE adr"), Size => 3, Description => Opcode_String.To_Bounded_String("if PE, PC <- adr")),
      16#eb# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("XCHG"), Size => 1, Description => Opcode_String.To_Bounded_String("H <-> D; L <-> E")),
      16#ec# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("CPE adr"), Size => 3, Description => Opcode_String.To_Bounded_String("if PE, CALL adr")),
      16#ee# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("XRI D8"), Size => 2, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A ^ data")),
      16#ef# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("RST 5"), Size => 1, Description => Opcode_String.To_Bounded_String("CALL $28")),
      16#f0# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("RP"), Size => 1, Description => Opcode_String.To_Bounded_String("if P, RET")),
      16#f1# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("POP PSW"), Size => 1, Description => Opcode_String.To_Bounded_String("flags <- (sp); A <- (sp+1); sp <- sp+2")),
      16#f2# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("JP adr"), Size => 3, Description => Opcode_String.To_Bounded_String("if P=1 PC <- adr")),
      16#f3# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("DI"), Size => 1, Description => Opcode_String.To_Bounded_String("special")),
      16#f4# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("CP adr"), Size => 3, Description => Opcode_String.To_Bounded_String("if P, PC <- adr")),
      16#f5# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("PUSH PSW"), Size => 1, Description => Opcode_String.To_Bounded_String("(sp-2)<-flags; (sp-1)<-A; sp <- sp - 2")),
      16#f6# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("ORI D8"), Size => 2, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A <- A | data")),
      16#f7# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("RST 6"), Size => 1, Description => Opcode_String.To_Bounded_String("CALL $30")),
      16#f8# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("RM"), Size => 1, Description => Opcode_String.To_Bounded_String("if M, RET")),
      16#f9# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("SPHL"), Size => 1, Description => Opcode_String.To_Bounded_String("SP=HL")),
      16#fa# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("JM adr"), Size => 3, Description => Opcode_String.To_Bounded_String("if M, PC <- adr")),
      16#fb# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("EI"), Size => 1, Description => Opcode_String.To_Bounded_String("special")),
      16#fc# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("CM adr"), Size => 3, Description => Opcode_String.To_Bounded_String("if M, CALL adr")),
      16#fe# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("CPI D8"), Size => 2, Description => Opcode_String.To_Bounded_String("(Z, S, P, CY, AC): A - data")),
      16#ff# => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("RST 7"), Size => 1, Description => Opcode_String.To_Bounded_String("CALL $38")),
      others => Opcode_Information_Type'(Mnemonic => Opcode_String.To_Bounded_String("UNDEFINED OPCODE"), Description => Opcode_String.To_Bounded_String("UNDEFINED OPCODE"), Size => 1));
end Emulator_8080.Disassembler;
